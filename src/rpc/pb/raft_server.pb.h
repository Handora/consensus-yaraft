// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_server.proto

#ifndef PROTOBUF_raft_5fserver_2eproto__INCLUDED
#define PROTOBUF_raft_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "yaraft/pb/raftpb.pb.h"
// @@protoc_insertion_point(includes)

namespace consensus {
namespace rpc {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_5fserver_2eproto();
void protobuf_AssignDesc_raft_5fserver_2eproto();
void protobuf_ShutdownFile_raft_5fserver_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .yaraft.pb.Message message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::yaraft::pb::Message& message() const;
  inline ::yaraft::pb::Message* mutable_message();
  inline ::yaraft::pb::Message* release_message();
  inline void set_allocated_message(::yaraft::pb::Message* message);

  // @@protoc_insertion_point(class_scope:consensus.rpc.pb.Request)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yaraft::pb::Message* message_;
  friend void  protobuf_AddDesc_raft_5fserver_2eproto();
  friend void protobuf_AssignDesc_raft_5fserver_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserver_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .yaraft.pb.Message message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::yaraft::pb::Message& message() const;
  inline ::yaraft::pb::Message* mutable_message();
  inline ::yaraft::pb::Message* release_message();
  inline void set_allocated_message(::yaraft::pb::Message* message);

  // @@protoc_insertion_point(class_scope:consensus.rpc.pb.Response)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yaraft::pb::Message* message_;
  friend void  protobuf_AddDesc_raft_5fserver_2eproto();
  friend void protobuf_AssignDesc_raft_5fserver_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserver_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Step(::google::protobuf::RpcController* controller,
                       const ::consensus::rpc::pb::Request* request,
                       ::consensus::rpc::pb::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::google::protobuf::RpcChannel* channel);
  RaftService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void Step(::google::protobuf::RpcController* controller,
                       const ::consensus::rpc::pb::Request* request,
                       ::consensus::rpc::pb::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

// Request

// required .yaraft.pb.Message message = 1;
inline bool Request::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_message() {
  if (message_ != NULL) message_->::yaraft::pb::Message::Clear();
  clear_has_message();
}
inline const ::yaraft::pb::Message& Request::message() const {
  // @@protoc_insertion_point(field_get:consensus.rpc.pb.Request.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::yaraft::pb::Message* Request::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::yaraft::pb::Message;
  // @@protoc_insertion_point(field_mutable:consensus.rpc.pb.Request.message)
  return message_;
}
inline ::yaraft::pb::Message* Request::release_message() {
  clear_has_message();
  ::yaraft::pb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void Request::set_allocated_message(::yaraft::pb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:consensus.rpc.pb.Request.message)
}

// -------------------------------------------------------------------

// Response

// required .yaraft.pb.Message message = 1;
inline bool Response::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_message() {
  if (message_ != NULL) message_->::yaraft::pb::Message::Clear();
  clear_has_message();
}
inline const ::yaraft::pb::Message& Response::message() const {
  // @@protoc_insertion_point(field_get:consensus.rpc.pb.Response.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::yaraft::pb::Message* Response::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::yaraft::pb::Message;
  // @@protoc_insertion_point(field_mutable:consensus.rpc.pb.Response.message)
  return message_;
}
inline ::yaraft::pb::Message* Response::release_message() {
  clear_has_message();
  ::yaraft::pb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void Response::set_allocated_message(::yaraft::pb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:consensus.rpc.pb.Response.message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace rpc
}  // namespace consensus

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fserver_2eproto__INCLUDED
