// Copyright 2017 Wu Tao
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include "base/logging.h"
#include "pb/raft_server.pb.h"
#include "wal/wal.h"

#include <sofa/pbrpc/pbrpc.h>
#include <yaraft/conf.h>
#include <yaraft/pb/raftpb.pb.h>
#include <yaraft/raw_node.h>
#include <yaraft/ready.h>

namespace consensus {
namespace rpc {

inline bool IsResponseMatch(const yaraft::pb::Message &req, const yaraft::pb::Message &resp) {
  using namespace yaraft::pb;
  switch (req.type()) {
    case MsgHeartbeat:
      return resp.type() == MsgHeartbeatResp;
    case MsgPreVote:
      return resp.type() == MsgPreVoteResp;
    case MsgVote:
      return resp.type() == MsgVoteResp;
    case MsgApp:
      return resp.type() == MsgAppResp;
    default:
      return false;
  }
}

class Peer;
class RaftServiceImpl : public rpc::pb::RaftService {
 public:
  RaftServiceImpl(yaraft::RawNode *node, wal::WriteAheadLog *wal) : node_(node), wal_(wal) {}

  RaftServiceImpl() = default;

  virtual ~RaftServiceImpl();

  // @param `request` may be mutated after Step.
  virtual void Step(google::protobuf::RpcController *controller, const pb::Request *request,
                    pb::Response *response, google::protobuf::Closure *done) override {
    sofa::pbrpc::RpcController *cntl = static_cast<sofa::pbrpc::RpcController *>(controller);
    FMT_LOG(INFO, "RaftService::Step(): message from {}: {}", cntl->RemoteAddress(),
            yaraft::DumpPB(*request));

    // handling request
    const yaraft::pb::Message &req = request->message();
    auto resp = new yaraft::pb::Message();
    handle(req, resp);
    response->set_allocated_message(resp);
  }

 private:
  // if no response is generated by the FSM, `response` will remain uninitialized.
  void handle(const ::yaraft::pb::Message &request, ::yaraft::pb::Message *response) {
    using namespace yaraft::pb;

    FATAL_NOT_OK(node_->Step(const_cast<::yaraft::pb::Message &>(request)), "RawNode::Step");
    yaraft::Ready *rd = node_->GetReady();

    if (!rd->entries.empty()) {
      FATAL_NOT_OK(wal_->AppendEntries(rd->entries), "WriteAheadLog::AppendEntries");
    }

    if (!rd->hardState) {
    }

    if (rd->messages.empty()) {
      return;
    }

    // saves data into persistent storage before sending response
    bool success = true;

    switch (request.type()) {
      case MsgApp:
      case MsgVote:
      case MsgPreVote:
      case MsgHeartbeat: {
        // directly response to client
        CHECK(rd->messages.size() == 1);
        CHECK(IsResponseMatch(request, rd->messages[0]));

        *response = std::move(rd->messages[0]);
        rd->messages.clear();
        return;
      }

      case MsgHup:
      case MsgBeat:
      case MsgProp: {
        // respond with reject if broadcast failed
        response->set_reject(!broadcastAllReadyMails(rd));
        return;
      }

      case MsgVoteResp:
      case MsgHeartbeatResp:
      case MsgAppResp:
      case MsgPreVoteResp: {
        // the FSM may broadcast something after receiving a response,
        // but `response` should remain unset even if the broadcast failed,
        // since we don't respond to a response.
        CHECK(nullptr == response);
        broadcastAllReadyMails(rd);
        return;
      }

      default: {
        // must ignore the request
        CHECK(rd->messages.empty());
        CHECK(!yaraft::IsResponseMsg(request));
        return;
      }
    }
  }

  // return false if broadcast fails.
  bool broadcastAllReadyMails(yaraft::Ready *rd) {
    auto st = broadcast(rd->messages);
    if (!st.IsOK()) {
      LOG(WARNING) << "RaftServiceImpl::broadcast: " << st;
    }
    rd->messages.clear();
    return st.IsOK();
  }

  // asynchronously broadcast all messages in `mails`.
  Status broadcast(const std::vector<yaraft::pb::Message> &mails);

 private:
  friend class Peer;

  yaraft::RawNode *node_;
  wal::WriteAheadLog *wal_;

  std::map<uint64_t, Peer *> peerMap_;
};

}  // namespace rpc
}  // namespace consensus
