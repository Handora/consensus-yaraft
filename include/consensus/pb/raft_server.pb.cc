// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_server.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace consensus {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* StepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection* StepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection* StepResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection* StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection* StatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* RaftService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_raft_5fserver_2eproto() {
  protobuf_AddDesc_raft_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName("raft_server.proto");
  GOOGLE_CHECK(file != NULL);
  StepRequest_descriptor_ = file->message_type(0);
  static const int StepRequest_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepRequest, message_),
  };
  StepRequest_reflection_ = new ::google::protobuf::internal::GeneratedMessageReflection(
      StepRequest_descriptor_, StepRequest::default_instance_, StepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepRequest, _unknown_fields_), -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(), sizeof(StepRequest));
  StepResponse_descriptor_ = file->message_type(1);
  static const int StepResponse_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepResponse, code_),
  };
  StepResponse_reflection_ = new ::google::protobuf::internal::GeneratedMessageReflection(
      StepResponse_descriptor_, StepResponse::default_instance_, StepResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepResponse, _unknown_fields_), -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(), sizeof(StepResponse));
  StatusRequest_descriptor_ = file->message_type(2);
  static const int StatusRequest_offsets_[1] = {};
  StatusRequest_reflection_ = new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_, StatusRequest::default_instance_, StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_), -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(), sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(3);
  static const int StatusResponse_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, leader_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, raftindex_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, raftterm_),
  };
  StatusResponse_reflection_ = new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_, StatusResponse::default_instance_, StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_), -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(), sizeof(StatusResponse));
  StatusCode_descriptor_ = file->enum_type(0);
  RaftService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_raft_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StepRequest_descriptor_, &StepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StepResponse_descriptor_, &StepResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, &StatusResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fserver_2eproto() {
  delete StepRequest::default_instance_;
  delete StepRequest_reflection_;
  delete StepResponse::default_instance_;
  delete StepResponse_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
}

void protobuf_AddDesc_raft_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yaraft::pb::protobuf_AddDesc_yaraft_2fpb_2fraftpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\021raft_server.proto\022\014consensus.pb\032\026yaraf"
      "t/pb/raftpb.proto\"2\n\013StepRequest\022#\n\007mess"
      "age\030\001 \002(\0132\022.yaraft.pb.Message\"6\n\014StepRes"
      "ponse\022&\n\004code\030\001 \002(\0162\030.consensus.pb.Statu"
      "sCode\"\017\n\rStatusRequest\"E\n\016StatusResponse"
      "\022\016\n\006leader\030\004 \001(\004\022\021\n\traftIndex\030\005 \001(\004\022\020\n\010r"
      "aftTerm\030\006 \001(\004*<\n\nStatusCode\022\006\n\002OK\020\000\022\020\n\014S"
      "tepLocalMsg\020\001\022\024\n\020StepPeerNotFound\020\0022\221\001\n\013"
      "RaftService\022=\n\004Step\022\031.consensus.pb.StepR"
      "equest\032\032.consensus.pb.StepResponse\022C\n\006St"
      "atus\022\033.consensus.pb.StatusRequest\032\034.cons"
      "ensus.pb.StatusResponseB\t\200\001\001\210\001\001\220\001\001",
      474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("raft_server.proto",
                                                                    &protobuf_RegisterTypes);
  StepRequest::default_instance_ = new StepRequest();
  StepResponse::default_instance_ = new StepResponse();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  StepRequest::default_instance_->InitAsDefaultInstance();
  StepResponse::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fserver_2eproto {
  StaticDescriptorInitializer_raft_5fserver_2eproto() {
    protobuf_AddDesc_raft_5fserver_2eproto();
  }
} static_descriptor_initializer_raft_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCode_descriptor_;
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

// ===================================================================

#ifndef _MSC_VER
const int StepRequest::kMessageFieldNumber;
#endif  // !_MSC_VER

StepRequest::StepRequest() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:consensus.pb.StepRequest)
}

void StepRequest::InitAsDefaultInstance() {
  message_ = const_cast<::yaraft::pb::Message*>(&::yaraft::pb::Message::default_instance());
}

StepRequest::StepRequest(const StepRequest& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:consensus.pb.StepRequest)
}

void StepRequest::SharedCtor() {
  _cached_size_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepRequest::~StepRequest() {
  // @@protoc_insertion_point(destructor:consensus.pb.StepRequest)
  SharedDtor();
}

void StepRequest::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

void StepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepRequest_descriptor_;
}

const StepRequest& StepRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_raft_5fserver_2eproto();
  return *default_instance_;
}

StepRequest* StepRequest::default_instance_ = NULL;

StepRequest* StepRequest::New() const {
  return new StepRequest;
}

void StepRequest::Clear() {
  if (has_message()) {
    if (message_ != NULL)
      message_->::yaraft::pb::Message::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepRequest::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:consensus.pb.StepRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .yaraft.pb.Message message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:consensus.pb.StepRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:consensus.pb.StepRequest)
  return false;
#undef DO_
}

void StepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:consensus.pb.StepRequest)
  // required .yaraft.pb.Message message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, this->message(),
                                                                           output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:consensus.pb.StepRequest)
}

::google::protobuf::uint8* StepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:consensus.pb.StepRequest)
  // required .yaraft.pb.Message message = 1;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtualToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consensus.pb.StepRequest)
  return target;
}

int StepRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .yaraft.pb.Message message = 1;
    if (has_message()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(this->message());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepRequest* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const StepRequest*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepRequest::MergeFrom(const StepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      mutable_message()->::yaraft::pb::Message::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StepRequest::CopyFrom(const StepRequest& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StepRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  return true;
}

void StepRequest::Swap(StepRequest* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepRequest_descriptor_;
  metadata.reflection = StepRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StepResponse::kCodeFieldNumber;
#endif  // !_MSC_VER

StepResponse::StepResponse() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:consensus.pb.StepResponse)
}

void StepResponse::InitAsDefaultInstance() {}

StepResponse::StepResponse(const StepResponse& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:consensus.pb.StepResponse)
}

void StepResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepResponse::~StepResponse() {
  // @@protoc_insertion_point(destructor:consensus.pb.StepResponse)
  SharedDtor();
}

void StepResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepResponse_descriptor_;
}

const StepResponse& StepResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_raft_5fserver_2eproto();
  return *default_instance_;
}

StepResponse* StepResponse::default_instance_ = NULL;

StepResponse* StepResponse::New() const {
  return new StepResponse;
}

void StepResponse::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepResponse::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:consensus.pb.StepResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .consensus.pb.StatusCode code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(input, &value)));
          if (::consensus::pb::StatusCode_IsValid(value)) {
            set_code(static_cast<::consensus::pb::StatusCode>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:consensus.pb.StepResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:consensus.pb.StepResponse)
  return false;
#undef DO_
}

void StepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:consensus.pb.StepResponse)
  // required .consensus.pb.StatusCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:consensus.pb.StepResponse)
}

::google::protobuf::uint8* StepResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:consensus.pb.StepResponse)
  // required .consensus.pb.StatusCode code = 1;
  if (has_code()) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consensus.pb.StepResponse)
  return target;
}

int StepResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .consensus.pb.StatusCode code = 1;
    if (has_code()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepResponse* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const StepResponse*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepResponse::MergeFrom(const StepResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StepResponse::CopyFrom(const StepResponse& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StepResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  return true;
}

void StepResponse::Swap(StepResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepResponse_descriptor_;
  metadata.reflection = StepResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusRequest::StatusRequest() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:consensus.pb.StatusRequest)
}

void StatusRequest::InitAsDefaultInstance() {}

StatusRequest::StatusRequest(const StatusRequest& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:consensus.pb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:consensus.pb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_raft_5fserver_2eproto();
  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:consensus.pb.StatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:consensus.pb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:consensus.pb.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:consensus.pb.StatusRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:consensus.pb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:consensus.pb.StatusRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consensus.pb.StatusRequest)
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StatusResponse::kLeaderFieldNumber;
const int StatusResponse::kRaftIndexFieldNumber;
const int StatusResponse::kRaftTermFieldNumber;
#endif  // !_MSC_VER

StatusResponse::StatusResponse() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:consensus.pb.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {}

StatusResponse::StatusResponse(const StatusResponse& from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:consensus.pb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  leader_ = GOOGLE_ULONGLONG(0);
  raftindex_ = GOOGLE_ULONGLONG(0);
  raftterm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:consensus.pb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_raft_5fserver_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
#define OFFSET_OF_FIELD_(f) \
  (reinterpret_cast<char*>(&reinterpret_cast<StatusResponse*>(16)->f) - reinterpret_cast<char*>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(leader_, raftterm_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:consensus.pb.StatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 leader = 4;
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::uint64,
               ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &leader_)));
          set_has_leader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40))
          goto parse_raftIndex;
        break;
      }

      // optional uint64 raftIndex = 5;
      case 5: {
        if (tag == 40) {
        parse_raftIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::uint64,
               ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &raftindex_)));
          set_has_raftindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48))
          goto parse_raftTerm;
        break;
      }

      // optional uint64 raftTerm = 6;
      case 6: {
        if (tag == 48) {
        parse_raftTerm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::uint64,
               ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(input, &raftterm_)));
          set_has_raftterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(input, tag,
                                                                mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:consensus.pb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:consensus.pb.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:consensus.pb.StatusResponse)
  // optional uint64 leader = 4;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader(), output);
  }

  // optional uint64 raftIndex = 5;
  if (has_raftindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->raftindex(), output);
  }

  // optional uint64 raftTerm = 6;
  if (has_raftterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->raftterm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:consensus.pb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:consensus.pb.StatusResponse)
  // optional uint64 leader = 4;
  if (has_leader()) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader(), target);
  }

  // optional uint64 raftIndex = 5;
  if (has_raftindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->raftindex(),
                                                                              target);
  }

  // optional uint64 raftTerm = 6;
  if (has_raftterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->raftterm(),
                                                                              target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consensus.pb.StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 leader = 4;
    if (has_leader()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->leader());
    }

    // optional uint64 raftIndex = 5;
    if (has_raftindex()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->raftindex());
    }

    // optional uint64 raftTerm = 6;
    if (has_raftterm()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(this->raftterm());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
      ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_raftindex()) {
      set_raftindex(from.raftindex());
    }
    if (from.has_raftterm()) {
      set_raftterm(from.raftterm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    std::swap(leader_, other->leader_);
    std::swap(raftindex_, other->raftindex_);
    std::swap(raftterm_, other->raftterm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

// ===================================================================

RaftService::~RaftService() {}

const ::google::protobuf::ServiceDescriptor* RaftService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RaftService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

void RaftService::Step(::google::protobuf::RpcController* controller,
                       const ::consensus::pb::StepRequest*, ::consensus::pb::StepResponse*,
                       ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Step() not implemented.");
  done->Run();
}

void RaftService::Status(::google::protobuf::RpcController* controller,
                         const ::consensus::pb::StatusRequest*, ::consensus::pb::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Status() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RaftService_descriptor_);
  switch (method->index()) {
    case 0:
      Step(controller, ::google::protobuf::down_cast<const ::consensus::pb::StepRequest*>(request),
           ::google::protobuf::down_cast<::consensus::pb::StepResponse*>(response), done);
      break;
    case 1:
      Status(controller,
             ::google::protobuf::down_cast<const ::consensus::pb::StatusRequest*>(request),
             ::google::protobuf::down_cast<::consensus::pb::StatusResponse*>(response), done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::consensus::pb::StepRequest::default_instance();
    case 1:
      return ::consensus::pb::StatusRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast<::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RaftService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::consensus::pb::StepResponse::default_instance();
    case 1:
      return ::consensus::pb::StatusResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast<::google::protobuf::Message*>(NULL);
  }
}

RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel,
                                   ::google::protobuf::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_)
    delete channel_;
}

void RaftService_Stub::Step(::google::protobuf::RpcController* controller,
                            const ::consensus::pb::StepRequest* request,
                            ::consensus::pb::StepResponse* response,
                            ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller, request, response, done);
}
void RaftService_Stub::Status(::google::protobuf::RpcController* controller,
                              const ::consensus::pb::StatusRequest* request,
                              ::consensus::pb::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1), controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace consensus

// @@protoc_insertion_point(global_scope)
